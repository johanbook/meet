// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddPointToTimeSeriesCommand,
  CreateTimeSeriesCommand,
  DeleteTimeSeriesCommand,
  DeleteTimeSeriesPointCommand,
  TimeSeriesDetails,
  TimeSeriesListItem,
  UpdateTimeSeriesCommand,
  UpdateTimeSeriesPointCommand,
} from '../models/index';
import {
    AddPointToTimeSeriesCommandFromJSON,
    AddPointToTimeSeriesCommandToJSON,
    CreateTimeSeriesCommandFromJSON,
    CreateTimeSeriesCommandToJSON,
    DeleteTimeSeriesCommandFromJSON,
    DeleteTimeSeriesCommandToJSON,
    DeleteTimeSeriesPointCommandFromJSON,
    DeleteTimeSeriesPointCommandToJSON,
    TimeSeriesDetailsFromJSON,
    TimeSeriesDetailsToJSON,
    TimeSeriesListItemFromJSON,
    TimeSeriesListItemToJSON,
    UpdateTimeSeriesCommandFromJSON,
    UpdateTimeSeriesCommandToJSON,
    UpdateTimeSeriesPointCommandFromJSON,
    UpdateTimeSeriesPointCommandToJSON,
} from '../models/index';

export interface AddPointToTimeSeriesRequest {
    addPointToTimeSeriesCommand: AddPointToTimeSeriesCommand;
}

export interface CreateTimeSeriesRequest {
    createTimeSeriesCommand: CreateTimeSeriesCommand;
}

export interface DeleteTimeSeriesRequest {
    deleteTimeSeriesCommand: DeleteTimeSeriesCommand;
}

export interface DeleteTimeSeriesPointRequest {
    deleteTimeSeriesPointCommand: DeleteTimeSeriesPointCommand;
}

export interface GetTimeSeriesRequest {
    skip?: number;
    top?: number;
}

export interface GetTimeSeriesByIdRequest {
    id: string;
}

export interface UpdateTimeSeriesRequest {
    updateTimeSeriesCommand: UpdateTimeSeriesCommand;
}

export interface UpdateTimeSeriesPointRequest {
    updateTimeSeriesPointCommand: UpdateTimeSeriesPointCommand;
}

/**
 * 
 */
export class TimeSeriesApi extends runtime.BaseAPI {

    /**
     */
    async addPointToTimeSeriesRaw(requestParameters: AddPointToTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addPointToTimeSeriesCommand === null || requestParameters.addPointToTimeSeriesCommand === undefined) {
            throw new runtime.RequiredError('addPointToTimeSeriesCommand','Required parameter requestParameters.addPointToTimeSeriesCommand was null or undefined when calling addPointToTimeSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series/points`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPointToTimeSeriesCommandToJSON(requestParameters.addPointToTimeSeriesCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addPointToTimeSeries(requestParameters: AddPointToTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addPointToTimeSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createTimeSeriesRaw(requestParameters: CreateTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createTimeSeriesCommand === null || requestParameters.createTimeSeriesCommand === undefined) {
            throw new runtime.RequiredError('createTimeSeriesCommand','Required parameter requestParameters.createTimeSeriesCommand was null or undefined when calling createTimeSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTimeSeriesCommandToJSON(requestParameters.createTimeSeriesCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createTimeSeries(requestParameters: CreateTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createTimeSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteTimeSeriesRaw(requestParameters: DeleteTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteTimeSeriesCommand === null || requestParameters.deleteTimeSeriesCommand === undefined) {
            throw new runtime.RequiredError('deleteTimeSeriesCommand','Required parameter requestParameters.deleteTimeSeriesCommand was null or undefined when calling deleteTimeSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTimeSeriesCommandToJSON(requestParameters.deleteTimeSeriesCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTimeSeries(requestParameters: DeleteTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimeSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteTimeSeriesPointRaw(requestParameters: DeleteTimeSeriesPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteTimeSeriesPointCommand === null || requestParameters.deleteTimeSeriesPointCommand === undefined) {
            throw new runtime.RequiredError('deleteTimeSeriesPointCommand','Required parameter requestParameters.deleteTimeSeriesPointCommand was null or undefined when calling deleteTimeSeriesPoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series/points`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteTimeSeriesPointCommandToJSON(requestParameters.deleteTimeSeriesPointCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTimeSeriesPoint(requestParameters: DeleteTimeSeriesPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTimeSeriesPointRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTimeSeriesRaw(requestParameters: GetTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TimeSeriesListItem>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/time-series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TimeSeriesListItemFromJSON));
    }

    /**
     */
    async getTimeSeries(requestParameters: GetTimeSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TimeSeriesListItem>> {
        const response = await this.getTimeSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getTimeSeriesByIdRaw(requestParameters: GetTimeSeriesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSeriesDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTimeSeriesById.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/time-series/byId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSeriesDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getTimeSeriesById(requestParameters: GetTimeSeriesByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSeriesDetails> {
        const response = await this.getTimeSeriesByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTimeSeriesRaw(requestParameters: UpdateTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateTimeSeriesCommand === null || requestParameters.updateTimeSeriesCommand === undefined) {
            throw new runtime.RequiredError('updateTimeSeriesCommand','Required parameter requestParameters.updateTimeSeriesCommand was null or undefined when calling updateTimeSeries.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTimeSeriesCommandToJSON(requestParameters.updateTimeSeriesCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateTimeSeries(requestParameters: UpdateTimeSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTimeSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateTimeSeriesPointRaw(requestParameters: UpdateTimeSeriesPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateTimeSeriesPointCommand === null || requestParameters.updateTimeSeriesPointCommand === undefined) {
            throw new runtime.RequiredError('updateTimeSeriesPointCommand','Required parameter requestParameters.updateTimeSeriesPointCommand was null or undefined when calling updateTimeSeriesPoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/time-series/points`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTimeSeriesPointCommandToJSON(requestParameters.updateTimeSeriesPointCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateTimeSeriesPoint(requestParameters: UpdateTimeSeriesPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTimeSeriesPointRaw(requestParameters, initOverrides);
    }

}
