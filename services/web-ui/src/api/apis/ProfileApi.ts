// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProfileCommand,
  ProfileDetails,
  UpdateProfileCommand,
} from '../models/index';
import {
    CreateProfileCommandFromJSON,
    CreateProfileCommandToJSON,
    ProfileDetailsFromJSON,
    ProfileDetailsToJSON,
    UpdateProfileCommandFromJSON,
    UpdateProfileCommandToJSON,
} from '../models/index';

export interface CreateCurrentProfileRequest {
    createProfileCommand: CreateProfileCommand;
}

export interface GetProfileRequest {
    id: number;
}

export interface UpdateCurrentProfileRequest {
    updateProfileCommand: UpdateProfileCommand;
}

export interface UpdateCurrentProfilePhotoRequest {
    photo: Blob;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     */
    async checkIfProfileExistsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/current/exists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async checkIfProfileExists(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.checkIfProfileExistsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async createCurrentProfileRaw(requestParameters: CreateCurrentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createProfileCommand === null || requestParameters.createProfileCommand === undefined) {
            throw new runtime.RequiredError('createProfileCommand','Required parameter requestParameters.createProfileCommand was null or undefined when calling createCurrentProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile/current`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProfileCommandToJSON(requestParameters.createProfileCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createCurrentProfile(requestParameters: CreateCurrentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createCurrentProfileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteCurrentProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/current`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCurrentProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentProfileRaw(initOverrides);
    }

    /**
     */
    async getCurrentProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDetails> {
        const response = await this.getCurrentProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDetails> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCurrentProfileRaw(requestParameters: UpdateCurrentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateProfileCommand === null || requestParameters.updateProfileCommand === undefined) {
            throw new runtime.RequiredError('updateProfileCommand','Required parameter requestParameters.updateProfileCommand was null or undefined when calling updateCurrentProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/profile/current`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileCommandToJSON(requestParameters.updateProfileCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentProfile(requestParameters: UpdateCurrentProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentProfileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateCurrentProfilePhotoRaw(requestParameters: UpdateCurrentProfilePhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.photo === null || requestParameters.photo === undefined) {
            throw new runtime.RequiredError('photo','Required parameter requestParameters.photo was null or undefined when calling updateCurrentProfilePhoto.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photo !== undefined) {
            formParams.append('photo', requestParameters.photo as any);
        }

        const response = await this.request({
            path: `/api/profile/current/photo`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentProfilePhoto(requestParameters: UpdateCurrentProfilePhotoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentProfilePhotoRaw(requestParameters, initOverrides);
    }

}
