// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddMemberToOrganizationCommand,
  AddMemberToOrganizationViaEmailCommand,
  CreateOrganizationCommand,
  CurrentOrganizationDetails,
  OrganizationDetails,
  OrganizationMemberDetails,
  SwitchOrganizationCommand,
  UpdateMemberRoleCommand,
  UpdateOrganizationCommand,
} from '../models/index';
import {
    AddMemberToOrganizationCommandFromJSON,
    AddMemberToOrganizationCommandToJSON,
    AddMemberToOrganizationViaEmailCommandFromJSON,
    AddMemberToOrganizationViaEmailCommandToJSON,
    CreateOrganizationCommandFromJSON,
    CreateOrganizationCommandToJSON,
    CurrentOrganizationDetailsFromJSON,
    CurrentOrganizationDetailsToJSON,
    OrganizationDetailsFromJSON,
    OrganizationDetailsToJSON,
    OrganizationMemberDetailsFromJSON,
    OrganizationMemberDetailsToJSON,
    SwitchOrganizationCommandFromJSON,
    SwitchOrganizationCommandToJSON,
    UpdateMemberRoleCommandFromJSON,
    UpdateMemberRoleCommandToJSON,
    UpdateOrganizationCommandFromJSON,
    UpdateOrganizationCommandToJSON,
} from '../models/index';

export interface AddMemberToOrganizationRequest {
    addMemberToOrganizationCommand: AddMemberToOrganizationCommand;
}

export interface AddMemberToOrganizationViaEmailRequest {
    addMemberToOrganizationViaEmailCommand: AddMemberToOrganizationViaEmailCommand;
}

export interface ChangeMemberRoleRequest {
    updateMemberRoleCommand: UpdateMemberRoleCommand;
}

export interface CreateOrganizationRequest {
    createOrganizationCommand: CreateOrganizationCommand;
}

export interface RemoveMemberFromCurrentOrganizationRequest {
    membershipId: number;
}

export interface SwitchOrganizationRequest {
    switchOrganizationCommand: SwitchOrganizationCommand;
}

export interface UpdateCurrentOrganizationRequest {
    updateOrganizationCommand: UpdateOrganizationCommand;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     */
    async addMemberToOrganizationRaw(requestParameters: AddMemberToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addMemberToOrganizationCommand === null || requestParameters.addMemberToOrganizationCommand === undefined) {
            throw new runtime.RequiredError('addMemberToOrganizationCommand','Required parameter requestParameters.addMemberToOrganizationCommand was null or undefined when calling addMemberToOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations/current/members`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMemberToOrganizationCommandToJSON(requestParameters.addMemberToOrganizationCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addMemberToOrganization(requestParameters: AddMemberToOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMemberToOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addMemberToOrganizationViaEmailRaw(requestParameters: AddMemberToOrganizationViaEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.addMemberToOrganizationViaEmailCommand === null || requestParameters.addMemberToOrganizationViaEmailCommand === undefined) {
            throw new runtime.RequiredError('addMemberToOrganizationViaEmailCommand','Required parameter requestParameters.addMemberToOrganizationViaEmailCommand was null or undefined when calling addMemberToOrganizationViaEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations/current/members/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddMemberToOrganizationViaEmailCommandToJSON(requestParameters.addMemberToOrganizationViaEmailCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addMemberToOrganizationViaEmail(requestParameters: AddMemberToOrganizationViaEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addMemberToOrganizationViaEmailRaw(requestParameters, initOverrides);
    }

    /**
     */
    async changeMemberRoleRaw(requestParameters: ChangeMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateMemberRoleCommand === null || requestParameters.updateMemberRoleCommand === undefined) {
            throw new runtime.RequiredError('updateMemberRoleCommand','Required parameter requestParameters.updateMemberRoleCommand was null or undefined when calling changeMemberRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations/current/members/role`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMemberRoleCommandToJSON(requestParameters.updateMemberRoleCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeMemberRole(requestParameters: ChangeMemberRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeMemberRoleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createOrganizationRaw(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createOrganizationCommand === null || requestParameters.createOrganizationCommand === undefined) {
            throw new runtime.RequiredError('createOrganizationCommand','Required parameter requestParameters.createOrganizationCommand was null or undefined when calling createOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationCommandToJSON(requestParameters.createOrganizationCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createOrganization(requestParameters: CreateOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteCurrentOrganizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/current`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCurrentOrganization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCurrentOrganizationRaw(initOverrides);
    }

    /**
     */
    async getCurrentOrganizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentOrganizationDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentOrganizationDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentOrganization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentOrganizationDetails> {
        const response = await this.getCurrentOrganizationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getCurrentOrganizationMembersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationMemberDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/current/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationMemberDetailsFromJSON));
    }

    /**
     */
    async getCurrentOrganizationMembers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationMemberDetails>> {
        const response = await this.getCurrentOrganizationMembersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOrganizationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrganizationDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationDetailsFromJSON));
    }

    /**
     */
    async getOrganizations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrganizationDetails>> {
        const response = await this.getOrganizationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async leaveCurrentOrganizationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/current/leave`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async leaveCurrentOrganization(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.leaveCurrentOrganizationRaw(initOverrides);
    }

    /**
     */
    async removeMemberFromCurrentOrganizationRaw(requestParameters: RemoveMemberFromCurrentOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling removeMemberFromCurrentOrganization.');
        }

        const queryParameters: any = {};

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/organizations/current/members`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeMemberFromCurrentOrganization(requestParameters: RemoveMemberFromCurrentOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeMemberFromCurrentOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async switchOrganizationRaw(requestParameters: SwitchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.switchOrganizationCommand === null || requestParameters.switchOrganizationCommand === undefined) {
            throw new runtime.RequiredError('switchOrganizationCommand','Required parameter requestParameters.switchOrganizationCommand was null or undefined when calling switchOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations/switch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SwitchOrganizationCommandToJSON(requestParameters.switchOrganizationCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async switchOrganization(requestParameters: SwitchOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.switchOrganizationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateCurrentOrganizationRaw(requestParameters: UpdateCurrentOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateOrganizationCommand === null || requestParameters.updateOrganizationCommand === undefined) {
            throw new runtime.RequiredError('updateOrganizationCommand','Required parameter requestParameters.updateOrganizationCommand was null or undefined when calling updateCurrentOrganization.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/organizations/current`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationCommandToJSON(requestParameters.updateOrganizationCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCurrentOrganization(requestParameters: UpdateCurrentOrganizationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateCurrentOrganizationRaw(requestParameters, initOverrides);
    }

}
