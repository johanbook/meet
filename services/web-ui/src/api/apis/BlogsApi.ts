// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlogPhotoDetails,
  BlogPostDetails,
  CreateBlogPostCommentCommand,
  CreateBlogPostCommentReactionCommand,
  CreateBlogPostReactionCommand,
  DeleteBlogPostCommand,
  UpdateBlogPostCommand,
} from '../models/index';
import {
    BlogPhotoDetailsFromJSON,
    BlogPhotoDetailsToJSON,
    BlogPostDetailsFromJSON,
    BlogPostDetailsToJSON,
    CreateBlogPostCommentCommandFromJSON,
    CreateBlogPostCommentCommandToJSON,
    CreateBlogPostCommentReactionCommandFromJSON,
    CreateBlogPostCommentReactionCommandToJSON,
    CreateBlogPostReactionCommandFromJSON,
    CreateBlogPostReactionCommandToJSON,
    DeleteBlogPostCommandFromJSON,
    DeleteBlogPostCommandToJSON,
    UpdateBlogPostCommandFromJSON,
    UpdateBlogPostCommandToJSON,
} from '../models/index';

export interface CreateBlogPostRequest {
    content: string;
    photos?: Array<Blob>;
    descriptions?: Array<string>;
}

export interface CreateBlogPostCommentRequest {
    createBlogPostCommentCommand: CreateBlogPostCommentCommand;
}

export interface CreateBlogPostCommentReactionRequest {
    createBlogPostCommentReactionCommand: CreateBlogPostCommentReactionCommand;
}

export interface CreateBlogPostReactionRequest {
    createBlogPostReactionCommand: CreateBlogPostReactionCommand;
}

export interface DeleteBlogPostCommentRequest {
    id: string;
}

export interface DeleteBlogPostCommentReactionRequest {
    reactionId: string;
}

export interface DeleteBlogPostReactionRequest {
    reactionId: string;
}

export interface DeletelogPostRequest {
    deleteBlogPostCommand: DeleteBlogPostCommand;
}

export interface GetBlogPhotoListRequest {
    skip?: number;
    top?: number;
}

export interface GetBlogPostRequest {
    id: string;
}

export interface GetBlogPostsRequest {
    skip?: number;
    top?: number;
}

export interface UpdateBlogPostRequest {
    updateBlogPostCommand: UpdateBlogPostCommand;
}

/**
 * 
 */
export class BlogsApi extends runtime.BaseAPI {

    /**
     */
    async createBlogPostRaw(requestParameters: CreateBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling createBlogPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photos) {
            requestParameters.photos.forEach((element) => {
                formParams.append('photos', element as any);
            })
        }

        if (requestParameters.content !== undefined) {
            formParams.append('content', requestParameters.content as any);
        }

        if (requestParameters.descriptions) {
            formParams.append('descriptions', requestParameters.descriptions.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/api/blogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBlogPost(requestParameters: CreateBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBlogPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createBlogPostCommentRaw(requestParameters: CreateBlogPostCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBlogPostCommentCommand === null || requestParameters.createBlogPostCommentCommand === undefined) {
            throw new runtime.RequiredError('createBlogPostCommentCommand','Required parameter requestParameters.createBlogPostCommentCommand was null or undefined when calling createBlogPostComment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/blogs/comments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlogPostCommentCommandToJSON(requestParameters.createBlogPostCommentCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBlogPostComment(requestParameters: CreateBlogPostCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBlogPostCommentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createBlogPostCommentReactionRaw(requestParameters: CreateBlogPostCommentReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBlogPostCommentReactionCommand === null || requestParameters.createBlogPostCommentReactionCommand === undefined) {
            throw new runtime.RequiredError('createBlogPostCommentReactionCommand','Required parameter requestParameters.createBlogPostCommentReactionCommand was null or undefined when calling createBlogPostCommentReaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/blogs/comments/reactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlogPostCommentReactionCommandToJSON(requestParameters.createBlogPostCommentReactionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBlogPostCommentReaction(requestParameters: CreateBlogPostCommentReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBlogPostCommentReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createBlogPostReactionRaw(requestParameters: CreateBlogPostReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createBlogPostReactionCommand === null || requestParameters.createBlogPostReactionCommand === undefined) {
            throw new runtime.RequiredError('createBlogPostReactionCommand','Required parameter requestParameters.createBlogPostReactionCommand was null or undefined when calling createBlogPostReaction.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/blogs/reactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBlogPostReactionCommandToJSON(requestParameters.createBlogPostReactionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createBlogPostReaction(requestParameters: CreateBlogPostReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createBlogPostReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBlogPostCommentRaw(requestParameters: DeleteBlogPostCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBlogPostComment.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs/comments`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBlogPostComment(requestParameters: DeleteBlogPostCommentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBlogPostCommentRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBlogPostCommentReactionRaw(requestParameters: DeleteBlogPostCommentReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reactionId === null || requestParameters.reactionId === undefined) {
            throw new runtime.RequiredError('reactionId','Required parameter requestParameters.reactionId was null or undefined when calling deleteBlogPostCommentReaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.reactionId !== undefined) {
            queryParameters['reactionId'] = requestParameters.reactionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs/comments/reactions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBlogPostCommentReaction(requestParameters: DeleteBlogPostCommentReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBlogPostCommentReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteBlogPostReactionRaw(requestParameters: DeleteBlogPostReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reactionId === null || requestParameters.reactionId === undefined) {
            throw new runtime.RequiredError('reactionId','Required parameter requestParameters.reactionId was null or undefined when calling deleteBlogPostReaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.reactionId !== undefined) {
            queryParameters['reactionId'] = requestParameters.reactionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs/reactions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteBlogPostReaction(requestParameters: DeleteBlogPostReactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBlogPostReactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deletelogPostRaw(requestParameters: DeletelogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deleteBlogPostCommand === null || requestParameters.deleteBlogPostCommand === undefined) {
            throw new runtime.RequiredError('deleteBlogPostCommand','Required parameter requestParameters.deleteBlogPostCommand was null or undefined when calling deletelogPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/blogs`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteBlogPostCommandToJSON(requestParameters.deleteBlogPostCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletelogPost(requestParameters: DeletelogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletelogPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getBlogPhotoListRaw(requestParameters: GetBlogPhotoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPhotoDetails>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs/photos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogPhotoDetailsFromJSON));
    }

    /**
     */
    async getBlogPhotoList(requestParameters: GetBlogPhotoListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPhotoDetails>> {
        const response = await this.getBlogPhotoListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogPostRaw(requestParameters: GetBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlogPostDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBlogPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs/byId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlogPostDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getBlogPost(requestParameters: GetBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlogPostDetails> {
        const response = await this.getBlogPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getBlogPostsRaw(requestParameters: GetBlogPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlogPostDetails>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/blogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlogPostDetailsFromJSON));
    }

    /**
     */
    async getBlogPosts(requestParameters: GetBlogPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlogPostDetails>> {
        const response = await this.getBlogPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateBlogPostRaw(requestParameters: UpdateBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateBlogPostCommand === null || requestParameters.updateBlogPostCommand === undefined) {
            throw new runtime.RequiredError('updateBlogPostCommand','Required parameter requestParameters.updateBlogPostCommand was null or undefined when calling updateBlogPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/blogs`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBlogPostCommandToJSON(requestParameters.updateBlogPostCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateBlogPost(requestParameters: UpdateBlogPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateBlogPostRaw(requestParameters, initOverrides);
    }

}
