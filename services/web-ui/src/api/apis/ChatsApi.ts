// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatConversationDetails,
  ChatMessageDetails,
  CreateChatCommand,
  PostChatMessageCommand,
} from '../models/index';
import {
    ChatConversationDetailsFromJSON,
    ChatConversationDetailsToJSON,
    ChatMessageDetailsFromJSON,
    ChatMessageDetailsToJSON,
    CreateChatCommandFromJSON,
    CreateChatCommandToJSON,
    PostChatMessageCommandFromJSON,
    PostChatMessageCommandToJSON,
} from '../models/index';

export interface CreateConversationRequest {
    createChatCommand: CreateChatCommand;
}

export interface GetChatMessagesRequest {
    conversationId: string;
}

export interface PostChatMessageRequest {
    postChatMessageCommand: PostChatMessageCommand;
}

/**
 * 
 */
export class ChatsApi extends runtime.BaseAPI {

    /**
     */
    async createConversationRaw(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createChatCommand === null || requestParameters.createChatCommand === undefined) {
            throw new runtime.RequiredError('createChatCommand','Required parameter requestParameters.createChatCommand was null or undefined when calling createConversation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatCommandToJSON(requestParameters.createChatCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createConversation(requestParameters: CreateConversationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createConversationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getChatMessagesRaw(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatMessageDetails>>> {
        if (requestParameters.conversationId === null || requestParameters.conversationId === undefined) {
            throw new runtime.RequiredError('conversationId','Required parameter requestParameters.conversationId was null or undefined when calling getChatMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.conversationId !== undefined) {
            queryParameters['conversationId'] = requestParameters.conversationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chats/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatMessageDetailsFromJSON));
    }

    /**
     */
    async getChatMessages(requestParameters: GetChatMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatMessageDetails>> {
        const response = await this.getChatMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getConversationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChatConversationDetails>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChatConversationDetailsFromJSON));
    }

    /**
     */
    async getConversations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChatConversationDetails>> {
        const response = await this.getConversationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postChatMessageRaw(requestParameters: PostChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postChatMessageCommand === null || requestParameters.postChatMessageCommand === undefined) {
            throw new runtime.RequiredError('postChatMessageCommand','Required parameter requestParameters.postChatMessageCommand was null or undefined when calling postChatMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chats/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostChatMessageCommandToJSON(requestParameters.postChatMessageCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postChatMessage(requestParameters: PostChatMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postChatMessageRaw(requestParameters, initOverrides);
    }

}
