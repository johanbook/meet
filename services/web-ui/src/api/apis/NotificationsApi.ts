// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationDetails,
  NotificationMetaDetails,
  SaveNotificationSubscriptionCommand,
  VapidDetails,
} from '../models/index';
import {
    NotificationDetailsFromJSON,
    NotificationDetailsToJSON,
    NotificationMetaDetailsFromJSON,
    NotificationMetaDetailsToJSON,
    SaveNotificationSubscriptionCommandFromJSON,
    SaveNotificationSubscriptionCommandToJSON,
    VapidDetailsFromJSON,
    VapidDetailsToJSON,
} from '../models/index';

export interface GetNotifactionsRequest {
    skip?: number;
    top?: number;
}

export interface SaveSubscriptionRequest {
    saveNotificationSubscriptionCommand: SaveNotificationSubscriptionCommand;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     */
    async getMetaRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationMetaDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/meta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationMetaDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getMeta(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationMetaDetails> {
        const response = await this.getMetaRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getNotifactionsRaw(requestParameters: GetNotifactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<NotificationDetails>>> {
        const queryParameters: any = {};

        if (requestParameters.skip !== undefined) {
            queryParameters['skip'] = requestParameters.skip;
        }

        if (requestParameters.top !== undefined) {
            queryParameters['top'] = requestParameters.top;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NotificationDetailsFromJSON));
    }

    /**
     */
    async getNotifactions(requestParameters: GetNotifactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<NotificationDetails>> {
        const response = await this.getNotifactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getVapidRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VapidDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/notifications/vapid`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VapidDetailsFromJSON(jsonValue));
    }

    /**
     */
    async getVapid(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VapidDetails> {
        const response = await this.getVapidRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async saveSubscriptionRaw(requestParameters: SaveSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.saveNotificationSubscriptionCommand === null || requestParameters.saveNotificationSubscriptionCommand === undefined) {
            throw new runtime.RequiredError('saveNotificationSubscriptionCommand','Required parameter requestParameters.saveNotificationSubscriptionCommand was null or undefined when calling saveSubscription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/notifications/subscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaveNotificationSubscriptionCommandToJSON(requestParameters.saveNotificationSubscriptionCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async saveSubscription(requestParameters: SaveSubscriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveSubscriptionRaw(requestParameters, initOverrides);
    }

}
