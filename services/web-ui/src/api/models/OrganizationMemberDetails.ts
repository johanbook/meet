// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrganizationMemberDetails
 */
export interface OrganizationMemberDetails {
    /**
     * 
     * @type {string}
     * @memberof OrganizationMemberDetails
     */
    joinedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMemberDetails
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationMemberDetails
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMemberDetails
     */
    imageUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof OrganizationMemberDetails
     */
    profileId: number;
    /**
     * 
     * @type {string}
     * @memberof OrganizationMemberDetails
     */
    role: OrganizationMemberDetailsRoleEnum;
}


/**
 * @export
 */
export const OrganizationMemberDetailsRoleEnum = {
    Admin: 'admin',
    Member: 'member'
} as const;
export type OrganizationMemberDetailsRoleEnum = typeof OrganizationMemberDetailsRoleEnum[keyof typeof OrganizationMemberDetailsRoleEnum];


/**
 * Check if a given object implements the OrganizationMemberDetails interface.
 */
export function instanceOfOrganizationMemberDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "joinedAt" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "profileId" in value;
    isInstance = isInstance && "role" in value;

    return isInstance;
}

export function OrganizationMemberDetailsFromJSON(json: any): OrganizationMemberDetails {
    return OrganizationMemberDetailsFromJSONTyped(json, false);
}

export function OrganizationMemberDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationMemberDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'joinedAt': json['joinedAt'],
        'name': json['name'],
        'id': json['id'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'profileId': json['profileId'],
        'role': json['role'],
    };
}

export function OrganizationMemberDetailsToJSON(value?: OrganizationMemberDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'joinedAt': value.joinedAt,
        'name': value.name,
        'id': value.id,
        'imageUrl': value.imageUrl,
        'profileId': value.profileId,
        'role': value.role,
    };
}

