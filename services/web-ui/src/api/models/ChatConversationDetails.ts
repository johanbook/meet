// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChatMessageProfileDetails } from './ChatMessageProfileDetails';
import {
    ChatMessageProfileDetailsFromJSON,
    ChatMessageProfileDetailsFromJSONTyped,
    ChatMessageProfileDetailsToJSON,
} from './ChatMessageProfileDetails';

/**
 * 
 * @export
 * @interface ChatConversationDetails
 */
export interface ChatConversationDetails {
    /**
     * 
     * @type {Date}
     * @memberof ChatConversationDetails
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationDetails
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationDetails
     */
    imageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationDetails
     */
    lastMessage?: string;
    /**
     * 
     * @type {Date}
     * @memberof ChatConversationDetails
     */
    lastMessageSent?: Date;
    /**
     * 
     * @type {string}
     * @memberof ChatConversationDetails
     */
    name: string;
    /**
     * 
     * @type {Array<ChatMessageProfileDetails>}
     * @memberof ChatConversationDetails
     */
    profiles: Array<ChatMessageProfileDetails>;
}

/**
 * Check if a given object implements the ChatConversationDetails interface.
 */
export function instanceOfChatConversationDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "profiles" in value;

    return isInstance;
}

export function ChatConversationDetailsFromJSON(json: any): ChatConversationDetails {
    return ChatConversationDetailsFromJSONTyped(json, false);
}

export function ChatConversationDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatConversationDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['createdAt'])),
        'id': json['id'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'lastMessage': !exists(json, 'lastMessage') ? undefined : json['lastMessage'],
        'lastMessageSent': !exists(json, 'lastMessageSent') ? undefined : (new Date(json['lastMessageSent'])),
        'name': json['name'],
        'profiles': ((json['profiles'] as Array<any>).map(ChatMessageProfileDetailsFromJSON)),
    };
}

export function ChatConversationDetailsToJSON(value?: ChatConversationDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createdAt': (value.createdAt.toISOString()),
        'id': value.id,
        'imageUrl': value.imageUrl,
        'lastMessage': value.lastMessage,
        'lastMessageSent': value.lastMessageSent === undefined ? undefined : (value.lastMessageSent.toISOString()),
        'name': value.name,
        'profiles': ((value.profiles as Array<any>).map(ChatMessageProfileDetailsToJSON)),
    };
}

