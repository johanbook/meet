// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Meet API
 * The Meet API can be used to interact with Meet
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlogPostCommentReactionDetails } from './BlogPostCommentReactionDetails';
import {
    BlogPostCommentReactionDetailsFromJSON,
    BlogPostCommentReactionDetailsFromJSONTyped,
    BlogPostCommentReactionDetailsToJSON,
} from './BlogPostCommentReactionDetails';
import type { BlogPostProfileDetails } from './BlogPostProfileDetails';
import {
    BlogPostProfileDetailsFromJSON,
    BlogPostProfileDetailsFromJSONTyped,
    BlogPostProfileDetailsToJSON,
} from './BlogPostProfileDetails';

/**
 * 
 * @export
 * @interface BlogPostCommentDetails
 */
export interface BlogPostCommentDetails {
    /**
     * 
     * @type {string}
     * @memberof BlogPostCommentDetails
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCommentDetails
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof BlogPostCommentDetails
     */
    createdAt: string;
    /**
     * 
     * @type {BlogPostProfileDetails}
     * @memberof BlogPostCommentDetails
     */
    profile: BlogPostProfileDetails;
    /**
     * 
     * @type {BlogPostCommentReactionDetails}
     * @memberof BlogPostCommentDetails
     */
    reactions: BlogPostCommentReactionDetails;
}

/**
 * Check if a given object implements the BlogPostCommentDetails interface.
 */
export function instanceOfBlogPostCommentDetails(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "profile" in value;
    isInstance = isInstance && "reactions" in value;

    return isInstance;
}

export function BlogPostCommentDetailsFromJSON(json: any): BlogPostCommentDetails {
    return BlogPostCommentDetailsFromJSONTyped(json, false);
}

export function BlogPostCommentDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlogPostCommentDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'content': json['content'],
        'createdAt': json['createdAt'],
        'profile': BlogPostProfileDetailsFromJSON(json['profile']),
        'reactions': BlogPostCommentReactionDetailsFromJSON(json['reactions']),
    };
}

export function BlogPostCommentDetailsToJSON(value?: BlogPostCommentDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'content': value.content,
        'createdAt': value.createdAt,
        'profile': BlogPostProfileDetailsToJSON(value.profile),
        'reactions': BlogPostCommentReactionDetailsToJSON(value.reactions),
    };
}

