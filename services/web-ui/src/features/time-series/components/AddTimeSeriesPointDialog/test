import { fireEvent, waitFor } from "@testing-library/react";

import { timeSeriesApi } from "src/apis";
import {
  ReactQueryTestProvider,
  beforeEach,
  describe,
  expect,
  it,
  render,
  screen,
  vi,
} from "src/test";

import { AddTimeSeriesPointForm } from "./index";

// Mock the timeSeriesApi
vi.mock("src/apis", () => ({
  timeSeriesApi: {
    addPointToTimeSeries: vi.fn(),
  },
}));

// Mock the snackbar
vi.mock("src/core/snackbar", () => ({
  useSnackbar: () => ({
    success: vi.fn(),
    error: vi.fn(),
  }),
}));

describe("AddTimeSeriesPointForm", () => {
  const mockTimeSeriesId = "test-series-id";
  const mockOnAfterSubmit = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it("renders form fields correctly", () => {
    render(
      <ReactQueryTestProvider>
        <AddTimeSeriesPointForm timeSeriesId={mockTimeSeriesId} />
      </ReactQueryTestProvider>,
    );

    expect(screen.getByLabelText(/value/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/label/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/description/i)).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /create/i })).toBeInTheDocument();
  });

  it("submits form with correct data", async () => {
    const mockAddPoint = vi.mocked(timeSeriesApi.addPointToTimeSeries);
    mockAddPoint.mockResolvedValue();

    render(
      <ReactQueryTestProvider>
        <AddTimeSeriesPointForm
          timeSeriesId={mockTimeSeriesId}
          onAfterSubmit={mockOnAfterSubmit}
        />
      </ReactQueryTestProvider>,
    );

    // Fill out the form
    fireEvent.change(screen.getByLabelText(/value/i), {
      target: { value: "10.5" },
    });
    fireEvent.change(screen.getByLabelText(/label/i), {
      target: { value: "Test Label" },
    });
    fireEvent.change(screen.getByLabelText(/description/i), {
      target: { value: "Test Description" },
    });

    // Submit the form
    fireEvent.click(screen.getByRole("button", { name: /create/i }));

    await waitFor(() => {
      expect(mockAddPoint).toHaveBeenCalledWith({
        addPointToTimeSeriesCommand: {
          value: 10.5,
          label: "Test Label",
          description: "Test Description",
          timeSeriesId: mockTimeSeriesId,
        },
      });
    });

    await waitFor(() => {
      expect(mockOnAfterSubmit).toHaveBeenCalled();
    });
  });

  it("disables submit button when form is invalid", () => {
    render(
      <ReactQueryTestProvider>
        <AddTimeSeriesPointForm timeSeriesId={mockTimeSeriesId} />
      </ReactQueryTestProvider>,
    );

    const submitButton = screen.getByRole("button", { name: /create/i });
    expect(submitButton).toBeDisabled();

    // Fill only one field
    fireEvent.change(screen.getByLabelText(/value/i), {
      target: { value: "10" },
    });
    expect(submitButton).toBeDisabled();

    // Fill all required fields
    fireEvent.change(screen.getByLabelText(/label/i), {
      target: { value: "Test" },
    });
    fireEvent.change(screen.getByLabelText(/description/i), {
      target: { value: "Test" },
    });
    expect(submitButton).toBeEnabled();
  });
});
